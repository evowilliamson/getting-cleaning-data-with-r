z <- c(1.1, 9, 3.14)
?
?c
fdsf
sadfsafsadfsad
fsdaf
wesrfwefv
?c
swirl()
z
c(z, 555, z)
z*2 + 100
my_sqrt(z) - 1
my_sqrt <- sqrt(z) - 1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0,
| 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
httr::set_config(httr::config(httr::ssl.verifypeer=0L))
reset_config
swirl()
exit
quit
swirl()
library(swirl)
swirl()
swirl()
swirl()
getwd()
ls9)
ls)_
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files
fsadfsf
fsadfsf
swirl()
args()
args(list.files)
old.dir <- getwd()
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
ls()
dir()
file.exists('mytest.R'
)
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive= TRUE)
setwd(old.dir)
1:20
pi:30
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq= seq(5, 10, length=30)
my_seq<- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(o, times=40)
rep(0, times=40)
rep(c(0, 1, 2), times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each = 10
)
c(0.5, 55, -10, 6)
info()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Ivo")
paste(c(my_char, "Ivo"), collapse=" ")
my_name <- paste(c(my_char, "Ivo"), collapse=" ")
my_char
my_name <- c(my_char, "Ivo")
my_name <- c(my_char, "Ivo")
my_char
my_name <- c(my_char, "Ivo")
my_char
play()
my_char
my_name <- c(my_char, "Ivo")
my_char
my_name
nxt()
my_char
info()
skip()
paste(my_name, collapse=TRUE)
paste(my_char, collapse = " ")
skip()
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
info()
main()
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_data.is_na()
my_data.is.na()
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
Sys.time()
x <- Sys.time()
p <- as.POSIXlt(x)
p
names(unclass(x))
names(unclass(p))
p#min
p$zone
p$year
p
class(p)
p["year"]
p[["year"]]
?strptime
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed, xlab=speed)
plot(cars$dist, cars$speed, xlab='speed')
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, sub="My Plot Subtitle", par="color")
plot(cars, sub="My Plot Subtitle", col-2)
plot(cars, sub="My Plot Subtitle", col=2)
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch=2
)
data(mtcars)
?boxplot
boxplot(mpg ~cyl, data=mtcars)
hist(mtcars@mpg)
hist(mtcars$mpg)
.libPaths()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
bye
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl.verifypeer = 0L
))
set_library(httr)
config( config( ssl.verifypeer = 0L
))
library(httr)
library(devtools)
ssl.verifypeer = 0L ) )
set_config( config( ssl.verifypeer = 0L ) )
set_config( config( ssl.verifypeer = 0L
))
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl_verifypeer = 0L
)
)
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl.verifypeer = 0L ) )
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl_verifypeer = 0L ) )
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl.verifypeer = 0L ) )
install_from_swirl("Getting and Cleaning Data")
set_config( config( ssl_verifypeer = 0L ) )
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
set_config(config(ssl.verifypeer = 0L))
reset_config()
set_config(config(ssl.verifypeer = 0L))
install_from_swirl("Getting and Cleaning Data")
reset_config()
set_config(config(ssl_verifypeer = 0L))
install_from_swirl("Getting and Cleaning Data")
swirl()
bye()
swirl()
source("http://bioconductor.org/biocLite.R")
bioLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created<-h5createFile("example.h5")
created
class(created)
created<-h5createGroup("example.h5", 'foo')
created<-h5createGroup("example.h5", 'bar')
created<-h5createGroup("example.h5", 'baa')
created<-h5createGroup("example.h5", 'foo/foobaa')
h5ls("example.h5")
A <- matrix(1:10, nr=5, nc=2)
A
h5write(A, "example.h5", 'foo/A')
B<-array(seq(0.1, 2.0, by=2.0), dim=c(5, 2, 2)
B
)
B<-array(seq(0.1, 2.0, by=2.0), dim=c(5, 2, 2))
B
B<-array(seq(0.1, 2.0, by=0.1), dim=c(5, 2, 2))
B
attr(B, "scale") <- "liter"
B
h5write(B, "example.h5", "foo/foobaa/B")
h4ls(example.h5)
h5ls(example.h5)
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1, length.out=5)
df
df
df = data.frame(1L:5L, seq(0,1, length.out=5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA <- h5re
readA <- h5read("example.h5", "foo/A")
read.csv()
readA
readdf <- h5read("example.h5", "df")
readdf
h5write(c(12, 13, 14), "example.h5", "foo/A", index=list(1:3), 1))
h5write(c(12, 13, 14), "example.h5", "foo/A", index=list(1:3, 1))
h5read("example.h5", "foo/A")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "b7767e5c540036d83cae",
secret = "94b21860f6076f41427245eeb52a3b058cfff8b4")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/rate_limit", gtoken)
library(devtools)
set_config( config( ssl.verifypeer = 0L ) )
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httr)
req <- GET("https://api.github.com/rate_limit", gtoken)
reset_config()
library(httr)
set_config( config( ssl.verifypeer = 0L ) )
req <- GET("https://api.github.com/rate_limit", gtoken)
set_config( config( ssl_verifypeer = 0L ) )
req <- GET("https://api.github.com/rate_limit", gtoken)
reset_config()
set_config( config( ssl_verifypeer = 0L ) )
req <- GET("https://api.github.com/rate_limit", gtoken)
req
req <- GET("https://api.github.com/users/jtleek/repo", gtoken)
req
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
oatth2.0_token
oath2.0_token
oath2.0_token()
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
myapp
myapp <- oauth_app("github",
key = "b7767e5c540036d83cae",
secret = "94b21860f6076f41427245eeb52a3b058cfff8b4")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github",
key = "b7767e5c540036d83cae",
secret = "94b21860f6076f41427245eeb52a3b058cfff8b4")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github",
key = "b7767e5c540036d83cae",
secret = "94b21860f6076f41427245eeb52a3b058cfff8b4")
library(httr)
myapp <- oauth_app("github",
key = "b7767e5c540036d83cae",
secret = "94b21860f6076f41427245eeb52a3b058cfff8b4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
read.csv(url(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv)
read.csv(url(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv))
read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"))
acs<-read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"))
acs
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
library(XML)
install.packages("XML")
library(XML)
library(RCurl)
library(rlist)
library(XML)
library(RCurl)
library(rlist)
install.packages("rlist")
library(rlist)
theurl <- getURL("http://biostat.jhsph.edu/~jleek/contact.html")
theurl
strsplit(theurl, "\n")
bla<-strsplit(theurl, "\n")
bla
class(bla)
bla(c(10,20,30,100t))
bla[c(10,20,30,100t)]
bla[c(10,20,30,100)]
bla[10]
head(bla)
head(bla, 11)
bla[11]
bla[[11]]
bla[11]
bla[180]
bla[[180]]
bla[180]
class(bla)
str(bla)
bla<-strsplit(theurl, "\n")
theurl
bla<-strsplit(theurl, "\\n")
bla
bla.length
length(bla)
bla[[180]][[1]]
dim(bla)
bla
tables <- readHTMLTable(theurl)
tables
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
tables
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
n.rows
theurl <- getURL("http://biostat.jhsph.edu/~jleek/contact.html")
theurl
class(theurl)
tables <- readHTMLTable(theurl)
tables
readLines("http://biostat.jhsph.edu/~jleek/contact.html")
haa<-readLines("http://biostat.jhsph.edu/~jleek/contact.html")
haa
class(haa)
haa
haa[180]
haa[10]
haa[c(10, 20)]
nchar(haa[c(10, 20)])
nchar(haa[c(10, 20, 30, 100)])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
x
x
head(x)
class(x)
sum(x$V4)
write.csv(x, "fff.csv")
getwd()
nrow(x)
sum(x$V1)
sum(x$V2)
sum(x$V3)
sum(x$V5)
sum(x$V4)
cx
c
x
sum(x$V4)
setwd('C:\tmp\R\GettingCleaning')
setwd('C:/tmp/R/GettingCleaning')
getwd()
install.packages('gsubfn')
source('enrich.R')
source('enrich.R')
source('getting_cleaning_data.R.R')
setwd('C:\tmp\R\GettingCleaning')
setwd('C:/tmp/R/GettingCleaning')
source('getting_cleaning_data.R.R')
source('getting_cleaning_data.R')
library(httr)
library(devtools)
set_config( config( ssl.verifypeer = 0L ) )
set_config( config( ssl_verifypeer = 0L ) )
req <- GET("https://api.github.com/rate_limit", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
reset_config()
set_config( config( ssl_verifypeer = 0L ) )
install.packages('knitr')
install.packages('rmarkdown')
source('getting_cleaning_data.R')
name='train'
name
features<-read.table("features.txt", header=FALSE, sep=" ")
## Add a column name to the headers that indicate the type (i.e. train or test)
headers<-c(as.vector(features[,2]), "type", "activity", "subject")
## Remove the parentheses and commas from the names of the variable mean and std variable names
headers<-unlist(lapply(headers, function(x) gsubfn(".", list(")"="", "("="", ","=""), x)))
## Read the activity labels from the file
activities<-read.table("activity_labels.txt", header=FALSE, sep=" ")
colnames(activities)<-c("activity_id", "activity_label")
activities
x<-read.table(paste0("./", type, "/X_", type, ".txt"), header=FALSE)
## Add the variable that indicates the type of set
x[, "type"] <- c(type)
type<-"train"
x<-read.table(paste0("./", type, "/X_", type, ".txt"), header=FALSE)
## Add the variable that indicates the type of set
x[, "type"] <- c(type)
head(x)
activity_references<-read.table(paste0("./", type, "/y_", type, ".txt"), header=FALSE)
colnames(activity_references)<-"activity_id"
activity_labels<-as.vector(inner_join(activity_references, activities, by=c("activity_id"))[, 2])
x[, "activity"] <- as.vector(activity_labels)
head(x)
subjects<-read.table(paste0("./", type, "/subject_", type, ".txt"), header=FALSE)
x[, "subject"] <- as.vector(subjects)
head(x)
colnames(x)<-headers
mean_std_columns_names<- colnames(x)[grepl("mean|std|type|activity|subject", colnames(x))]
head(x)
x<-x[mean_std_columns_names]
head(x)
x<-select(x, type, activity, subject, everything())
head(x)
source('getting_cleaning_data.R')
head (train_dataframe)
head(raw_dataframe)
head (train_dataframe)
str (train_dataframe)
?write
?write.csv
x <- data.frame(a = I("a \" quote"), b = pi)
x
write.csv(x, './x.csv')
write.csv(x, './x.csv', quote=FALSE)
x
str(x)
x
write.csv(x, './x.csv', quote=FALSE, row.names=FALSE)
source('getting_cleaning_data.R')
colnames(raw_dataframe
)
unlist(colnames(raw_dataframe)
)
as.vector(unlist(colnames(raw_dataframe)))
str(raw_dataframe)
source('getting_cleaning_data.R')
getwd)''
getwd()
source('getting_cleaning_data.R')
source('getting_cleaning_data.R')
source('run_analysis.R')
